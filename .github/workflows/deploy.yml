name: Deploy Android APK to Firebase App Distribution

on:
  push:
    branches:
      - master  # 🔥 Agora o workflow será acionado na branch master

jobs:
  build:
    name: Build and Deploy APK to Firebase
    runs-on: ubuntu-latest

    steps:
      # 🔹 Checkout do código-fonte do repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🔹 Configura o ambiente do JDK necessário para compilar o app
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 🔹 Configura cache do Gradle para otimizar o tempo de build
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}

      # 🔹 Gera o arquivo de credenciais do Firebase no runner
      - name: Create Google Services JSON
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: echo "$FIREBASE_SERVICE_ACCOUNT" > "/home/runner/work/TidyApp/TidyApp/app/google-services.json"

      # 🔹 Concede permissão para executar Gradle
      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      # 🔹 Faz o build do APK
      - name: Build Android APK
        run: ./gradlew assembleRelease

      # 🔹 Faz upload do APK para o Firebase App Distribution
      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsJson: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: testers  # 🔥 Substitua pelo grupo de testers do Firebase
          releaseNotes: "🚀 Nova versão disponível para teste!"
          file: app/build/outputs/apk/release/app-release.apk